<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.feidian.sidebarTree.mapper.TreePictureMapper">

    <resultMap type="com.feidian.sidebarTree.domain.TreePicture" id="TreePictureResult">
        <result property="pictureId"    column="picture_id"    />
        <result property="pictureUrl"    column="picture_url"    />
        <result property="treeId"    column="tree_id"    />
        <result property="isShow"    column="is_show"    />
        <result property="shotTime" column="shot_time"/>
        <result property="lessPictureUrl"    column="less_picture_url"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>
    <resultMap id="SidebarTreeMap" type="com.feidian.sidebarTree.domain.SidebarTree">
        <result property="treeName" column="tree_name"/>
        <result property="treeId" column="tree_id"/>
    </resultMap>
    <resultMap id="DocumentMap" type="com.feidian.sidebarTree.domain.vo.DocumentNumVO">
        <result column="DateTime" property="createTime"/>
        <result column="Counts" property="count"/>
    </resultMap>

    <sql id="selectTreePictureVo">
        select picture_id, picture_url, tree_id, is_show,shot_time,less_picture_url,create_time,update_time from tree_picture
    </sql>

    <select id="selectTreePictureList" parameterType="TreePicture" resultMap="TreePictureResult">
        <include refid="selectTreePictureVo"/>
        <where>
            <if test="pictureUrl != null  and pictureUrl != ''"> and picture_url = #{pictureUrl}</if>
            <if test="treeId != null "> and tree_id = #{treeId}</if>
            <if test="isShow != null "> and is_show = #{isShow}</if>
            <if test="shotTime!=null">and shot_time like concat('%', #{shotTime}, '%')</if>
        </where>
    </select>

    <select id="selectTreePictureByPictureId" parameterType="Long" resultMap="TreePictureResult">
        <include refid="selectTreePictureVo"/>
        where picture_id = #{pictureId}
    </select>

    <select id="selectTreeByTreeIdAndCreateBy" resultMap="TreePictureResult" parameterType="int">
        <include refid="selectTreePictureVo"/>
        where tree_id = #{treeId}
        <if test="createBy != null and createBy != ''"> and create_by = #{createBy}</if>
        or tree_id = #{treeId} and is_show = 1
    </select>

    <select id="selectTreePictureCountByTreeId" resultType="java.lang.Integer">
        select count(*) from tree_picture tp where (tree_id in (select tree_id from sidebar_tree where parent_id = #{treeId})) or tree_id = #{treeId}
    </select>
    <select id="selectPictureUrlById" resultType="java.lang.String">
        select picture_url from tree_picture where picture_id = #{pictureId}
    </select>
    <select id="selectNodeMessage" resultMap = "SidebarTreeMap">
        select tree_name,tree_id from sidebar_tree where parent_id = #{treeId}
    </select>
    <select id="selectTreePictureCountByTreeIdAndTime" resultMap="DocumentMap">
        select DATE(create_time) DateTime,count(*) Counts
        from citrus.phenotype_file
        where tree_id = #{treeId}
          and create_time between #{startDate} and #{endDate}
        group by DATE(create_time)
        order by DATE(create_time);

    </select>
    <select id="selectAllNodeMessage" resultMap= "SidebarTreeMap">
        select tree_id, tree_name
        from citrus.sidebar_tree
        where parent_id in (select tree_id
                            from citrus.sidebar_tree
                            where parent_id in (select tree_id
                                                from citrus.sidebar_tree
                                                where parent_id in (select tree_id
                                                                    from citrus.sidebar_tree
                                                                    where tree_type = #{treeType} and parent_id = 0)));


    </select>

    <insert id="insertTreePicture" parameterType="TreePicture" useGeneratedKeys="true" keyProperty="pictureId">
        insert into tree_picture
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="pictureUrl != null and pictureUrl != ''">picture_url,</if>
            <if test="lessPictureUrl != null and lessPictureUrl != ''">less_picture_url,</if>
            <if test="treeId != null">tree_id,</if>
            <if test="isShow != null">is_show,</if>
            <if test="createBy != null">create_by,create_time</if>
            <if test="shotTime !=null">show_time</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="pictureUrl != null and pictureUrl != ''">#{pictureUrl},</if>
            <if test="lessPictureUrl != null and lessPictureUrl != ''">#{lessPictureUrl},</if>
            <if test="treeId != null">#{treeId},</if>
            <if test="isShow != null">#{isShow},</if>
            <if test="createBy != null">#{createBy},NOW()</if>
            <if test="shotTime !=null">#{shotTime}</if>
        </trim>
    </insert>

    <update id="updateTreePicture" parameterType="TreePicture">
        update tree_picture
        <trim prefix="SET" suffixOverrides=",">
            <if test="pictureUrl != null and pictureUrl != ''">picture_url = #{pictureUrl},</if>
            <if test="pictureUrl != null and pictureUrl != ''">picture_url = #{pictureUrl},</if>
            <if test="treeId != null">tree_id = #{treeId},</if>
            <if test="isShow != null">is_show = #{isShow},</if>
            <if test="shotTime!=null">shot_time = #{shotTime}</if>
        </trim>
        where picture_id = #{pictureId}
    </update>

    <delete id="deleteTreePictureByPictureId" parameterType="Long">
        delete from tree_picture where picture_id = #{pictureId}
    </delete>

    <delete id="deleteTreePictureByPictureIds" parameterType="String">
        delete from tree_picture where picture_id in
        <foreach item="pictureId" collection="array" open="(" separator="," close=")">
            #{pictureId}
        </foreach>
    </delete>
</mapper>
